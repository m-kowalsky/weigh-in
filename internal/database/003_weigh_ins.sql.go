// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 003_weigh_ins.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createWeighIn = `-- name: CreateWeighIn :one
Insert into weigh_ins (created_at, updated_at, weight, weight_unit, log_date, note, cheated, alcohol, weigh_in_diet, user_id)
Values ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Returning id, created_at, updated_at, weight, weight_unit, log_date, note, cheated, alcohol, weigh_in_diet, user_id
`

type CreateWeighInParams struct {
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Weight      int64
	WeightUnit  string
	LogDate     time.Time
	Note        sql.NullString
	Cheated     bool
	Alcohol     bool
	WeighInDiet string
	UserID      int64
}

func (q *Queries) CreateWeighIn(ctx context.Context, arg CreateWeighInParams) (WeighIn, error) {
	row := q.db.QueryRowContext(ctx, createWeighIn,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Weight,
		arg.WeightUnit,
		arg.LogDate,
		arg.Note,
		arg.Cheated,
		arg.Alcohol,
		arg.WeighInDiet,
		arg.UserID,
	)
	var i WeighIn
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Weight,
		&i.WeightUnit,
		&i.LogDate,
		&i.Note,
		&i.Cheated,
		&i.Alcohol,
		&i.WeighInDiet,
		&i.UserID,
	)
	return i, err
}

const getWeightChartDataByUser = `-- name: GetWeightChartDataByUser :many
Select log_date, weight from weigh_ins
where user_id = ? and log_date >= ?
order by log_date
`

type GetWeightChartDataByUserParams struct {
	UserID  int64
	LogDate time.Time
}

type GetWeightChartDataByUserRow struct {
	LogDate time.Time
	Weight  int64
}

func (q *Queries) GetWeightChartDataByUser(ctx context.Context, arg GetWeightChartDataByUserParams) ([]GetWeightChartDataByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getWeightChartDataByUser, arg.UserID, arg.LogDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWeightChartDataByUserRow
	for rows.Next() {
		var i GetWeightChartDataByUserRow
		if err := rows.Scan(&i.LogDate, &i.Weight); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
