// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 002_diets.sql

package database

import (
	"context"
)

const createDiet = `-- name: CreateDiet :one
Insert into diets ( diet_type, user_id, is_default )
Values ( ?, ?, ? )
Returning id, diet_type, user_id, is_default
`

type CreateDietParams struct {
	DietType  string
	UserID    int64
	IsDefault bool
}

func (q *Queries) CreateDiet(ctx context.Context, arg CreateDietParams) (Diet, error) {
	row := q.db.QueryRowContext(ctx, createDiet, arg.DietType, arg.UserID, arg.IsDefault)
	var i Diet
	err := row.Scan(
		&i.ID,
		&i.DietType,
		&i.UserID,
		&i.IsDefault,
	)
	return i, err
}

const deleteDiet = `-- name: DeleteDiet :exec
Delete from diets
Where id = ?
`

func (q *Queries) DeleteDiet(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDiet, id)
	return err
}

const getDietsByUserId = `-- name: GetDietsByUserId :many
Select id, diet_type, user_id, is_default from diets
Where user_id = ?
`

func (q *Queries) GetDietsByUserId(ctx context.Context, userID int64) ([]Diet, error) {
	rows, err := q.db.QueryContext(ctx, getDietsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Diet
	for rows.Next() {
		var i Diet
		if err := rows.Scan(
			&i.ID,
			&i.DietType,
			&i.UserID,
			&i.IsDefault,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAllDietsIsDefault = `-- name: UpdateAllDietsIsDefault :exec
Update diets
Set is_default = false
`

func (q *Queries) UpdateAllDietsIsDefault(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, updateAllDietsIsDefault)
	return err
}

const updateDefaultDiet = `-- name: UpdateDefaultDiet :exec
Update diets
Set is_default = true
Where diet_type = ?
`

func (q *Queries) UpdateDefaultDiet(ctx context.Context, dietType string) error {
	_, err := q.db.ExecContext(ctx, updateDefaultDiet, dietType)
	return err
}
