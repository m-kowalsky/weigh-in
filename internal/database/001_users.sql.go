// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 001_users.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const checkIfUserExistsByEmail = `-- name: CheckIfUserExistsByEmail :one
Select count(*) from users where email = ?
`

func (q *Queries) CheckIfUserExistsByEmail(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkIfUserExistsByEmail, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
Insert into users (created_at, updated_at, email, access_token, full_name, provider)
Values ( ?, ?, ?, ?, ?, ?)
Returning id, created_at, updated_at, email, access_token, full_name, provider, weight_unit, username, starting_weight
`

type CreateUserParams struct {
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Email       string
	AccessToken string
	FullName    sql.NullString
	Provider    interface{}
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Email,
		arg.AccessToken,
		arg.FullName,
		arg.Provider,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.AccessToken,
		&i.FullName,
		&i.Provider,
		&i.WeightUnit,
		&i.Username,
		&i.StartingWeight,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
Select id, created_at, updated_at, email, access_token, full_name, provider, weight_unit, username, starting_weight From users
Where email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.AccessToken,
		&i.FullName,
		&i.Provider,
		&i.WeightUnit,
		&i.Username,
		&i.StartingWeight,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
Select id, created_at, updated_at, email, access_token, full_name, provider, weight_unit, username, starting_weight from users
Where id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.AccessToken,
		&i.FullName,
		&i.Provider,
		&i.WeightUnit,
		&i.Username,
		&i.StartingWeight,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
Update users
Set starting_weight = ?, weight_unit = ?, username = ?
Where id = ?
`

type UpdateUserParams struct {
	StartingWeight sql.NullInt64
	WeightUnit     interface{}
	Username       sql.NullString
	ID             int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.StartingWeight,
		arg.WeightUnit,
		arg.Username,
		arg.ID,
	)
	return err
}
